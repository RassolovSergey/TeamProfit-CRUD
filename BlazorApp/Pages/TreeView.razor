@page "/tree"
@using BlazorApp.Model
@using BlazorApp.Components
@using Microsoft.AspNetCore.Components.Web
@using System.Net.Http.Json
@inject HttpClient Http

<h1 style="text-align:center;font-size:24px;">Иерархическое Дерево</h1>

@if (MenuNode != null)
{
    <NodeContextMenu Node="MenuNode"
                     OnHide="() => MenuNode = null"
                     OnRefresh="RefreshTree"
                     OnEdit="ShowEditDialog"
                     OnAdd="ShowAddDialog" />
}

<EditDialog @ref="editDialog" OnSaved="RefreshTree" />
<AddDialog @ref="addDialog" OnAdded="RefreshTree" />

@if (TreeNodes == null)
{
    <p>Загрузка...</p>
}
else if (!TreeNodes.Any())
{
    <p>Данные отсутствуют</p>
}
else
{
    <ul class="list-unstyled">
        @foreach (var node in TreeNodes)
        {
            <TreeNodeComponent Node="node"
                               Level="0"
                               OnExpand="ExpandNode"
                               OnContextMenu="ShowContextMenu"
                               OnNodeDrop="HandleNodeDrop" />
        }
    </ul>
}

@code {
    private List<TreeNodeDto>? TreeNodes;
    private TreeNodeDto? MenuNode;
    private EditDialog? editDialog;
    private AddDialog? addDialog;

    protected override async Task OnInitializedAsync()
      => await RefreshTree();

    private async Task RefreshTree()
      => TreeNodes = await Http.GetFromJsonAsync<List<TreeNodeDto>>("Tree/root");

    private async Task ExpandNode(TreeNodeDto node)
    {
        var kids = await Http.GetFromJsonAsync<List<TreeNodeDto>>(
            $"Tree/{node.NodeType}/{node.Id}/children");
        node.Children = kids;
    }

    private Task ShowContextMenu((TreeNodeDto node, MouseEventArgs e) args)
    {
        MenuNode = args.node;
        return Task.CompletedTask;
    }

    private Task HandleNodeDrop((TreeNodeDto d, TreeNodeDto t) args)
      => Task.CompletedTask;

    // Вызывается NodeContextMenu → OnEdit
    private async Task ShowEditDialog(TreeNodeDto node)
    {
        await InvokeAsync(() =>
        {
            editDialog?.Show(node);
            MenuNode = null;
        });
    }

    // Вызывается NodeContextMenu → OnAdd
    private async Task ShowAddDialog(TreeNodeDto node)
    {
        await InvokeAsync(() =>
        {
            addDialog?.Show(node);
            MenuNode = null;
        });
    }
}
