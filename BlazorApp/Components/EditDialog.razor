@using BlazorApp.Model
@inject HttpClient Http

@if (IsVisible)
{
    <div class="modal fade show" style="display:block;">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Редактировать @Current.NodeType</h5>
                    <button type="button" class="btn-close" @onclick="Hide"></button>
                </div>
                <div class="modal-body">
                    <EditForm Model="FormModel" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        @if (Current.NodeType == "Team")
                        {
                            <label>Название</label>
                            <InputText @bind-Value="TeamModel.Name" class="form-control" />
                        }
                        else if (Current.NodeType == "User")
                        {
                            <label>Login</label>
                            <InputText @bind-Value="UserModel.Login" class="form-control" />

                            <label>Email</label>
                            <InputText @bind-Value="UserModel.Email" class="form-control" />

                            <label>Цена работы</label>
                            <InputNumber @bind-Value="UserModel.PriceWork" class="form-control" />
                        }
                        else if (Current.NodeType == "Cost")
                        {
                            <label>Сумма</label>
                            <InputNumber @bind-Value="CostModel.Amounts" class="form-control" />
                        }

                        <div class="mt-3 text-end">
                            <button type="button" class="btn btn-secondary me-2" @onclick="Hide">Отмена</button>
                            <button type="submit" class="btn btn-primary">Сохранить</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    private bool IsVisible;
    private TreeNodeDto Current = new();
    private TeamDTO TeamModel = new();
    private UserDTO UserModel = new();
    private CostDTO CostModel = new();

    // Добавим сюда свойство FormModel
    private object FormModel => Current.NodeType switch
    {
        "Team" => TeamModel,
        "User" => UserModel,
        "Cost" => CostModel,
        _ => null!
    };

    [Parameter] public EventCallback OnSaved { get; set; }

    public void Show(TreeNodeDto node)
    {
        Current = node;
        if (node.NodeType == "Team")
            TeamModel = new TeamDTO { Id = node.Id, Name = node.Name };
        else if (node.NodeType == "User")
            UserModel = new UserDTO
                {
                    Id = node.Id,
                    Login = node.Name
                    /* Email = /* запросите у API отдельно, если нужно */,
                    /*PriceWork =  тоже */
      };
        else // Cost
            CostModel = new CostDTO { Id = node.Id, Amounts = decimal.Parse(node.Name) };

        IsVisible = true;
    }

    private void Hide() => IsVisible = false;

    private async Task HandleValidSubmit()
    {
        if (Current.NodeType == "Team")
            await Http.PutAsJsonAsync("Tree", new UpdateNodeDto
                {
                    NodeType = "Team",
                    Id = TeamModel.Id,
                    Name = TeamModel.Name
                });
        else if (Current.NodeType == "User")
            await Http.PutAsJsonAsync("Tree", new UpdateNodeDto
                {
                    NodeType = "User",
                    Id = UserModel.Id,
                    Name = UserModel.Login
                });
        else
            await Http.PutAsJsonAsync("Tree", new UpdateNodeDto
                {
                    NodeType = "Cost",
                    Id = CostModel.Id,
                    Amount = CostModel.Amounts
                });

        await OnSaved.InvokeAsync();
        Hide();
    }

    private class TeamDTO
    {
        public int Id { get; set; }
        public string Name { get; set; } = string.Empty;
    }

    private class UserDTO
    {
        public int Id { get; set; }
        public string Login { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public decimal PriceWork { get; set; }
    }

    private class CostDTO
    {
        public int Id { get; set; }
        public decimal Amounts { get; set; }
    }

    private class UpdateNodeDto
    {
        public string NodeType { get; set; } = default!;
        public int Id { get; set; }
        public string? Name { get; set; }
        public decimal? Amount { get; set; }
    }
}
