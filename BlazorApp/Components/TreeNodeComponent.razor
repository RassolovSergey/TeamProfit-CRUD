@using Microsoft.AspNetCore.Components.Web
@using BlazorApp.Model

<li draggable="true"
    @ondragstart="(e) => OnDragStart(e, Node)"
    @ondrop="(e) => OnDrop(e, Node)"
@ondragover:preventDefault
    @oncontextmenu="(e) => OnContextMenu.InvokeAsync((Node, e))"
    style="list-style:none; padding-left:@(Level * 20)px;">

    <!-- Заголовок узла -->
    <div style="display:flex; align-items:center;">
        <span style="cursor:pointer;" @onclick="ToggleExpand">
            @(isExpanded ? "(-)" : "(+)")
        </span>
        <span style="margin-left:0.5rem; font-weight:bold;">@Node.Name</span>
    </div>

    @if (isExpanded)
    {
        <ul class="list-unstyled" style="padding-left:1rem; margin-top:0.25rem;">

            <!-- Общие поля -->
            <li><em>Id:</em> @Node.Id</li>
            @if (Node.NodeType == "Cost")
            {
                <li><em>Сумма:</em> @Node.Name</li>
            }
            else
            {
                <li><em>Name:</em> @Node.Name</li>
            }

            <!-- Группа Users для Team/VirtualTeam -->
            @if (Node.NodeType == "Team" || Node.NodeType == "VirtualTeam")
            {
                <li>
                    @if (Node.Children?.Any() == true)
                    {
                        <span style="cursor:pointer;" @onclick="ToggleChildren">
                            @(isChildrenExpanded ? "(-)" : "(+)") Users
                        </span>
                    }
                    else
                    {
                        <span>Users: Отсутствуют</span>
                    }
                </li>
            }

            <!-- Группа Costs для User -->
            @if (Node.NodeType == "User")
            {
                <li>
                    @if (Node.Children?.Any() == true)
                    {
                        <span style="cursor:pointer;" @onclick="ToggleChildren">
                            @(isChildrenExpanded ? "(-)" : "(+)") Costs
                        </span>
                    }
                    else
                    {
                        <span>Costs: Отсутствуют</span>
                    }
                </li>
            }

            <!-- Поддерево при раскрытии группы -->
            @if (isChildrenExpanded)
            {
                @if (Node.Children != null && Node.Children.Any())
                {
                    @foreach (var child in Node.Children)
                    {
                        <TreeNodeComponent Node="child"
                                           Level="Level + 1"
                                           OnExpand="OnExpand"
                                           OnContextMenu="OnContextMenu"
                                           OnNodeDrop="OnNodeDrop" />
                    }
                }
                else
                {
                    <!-- Сообщение об отсутствии потомков -->
                    <li>
                        <em>
                            @(Node.NodeType == "Team" || Node.NodeType == "VirtualTeam"
                                ? "Отсутствуют пользователи"
                                : "У пользователя отсутствуют траты")
                        </em>
                    </li>
                }
            }

        </ul>
    }

</li>

@code {
    [Parameter] public TreeNodeDto Node { get; set; } = default!;
    [Parameter] public int Level { get; set; }
    [Parameter] public EventCallback<TreeNodeDto> OnExpand { get; set; }
    [Parameter] public EventCallback<(TreeNodeDto, TreeNodeDto)> OnNodeDrop { get; set; }
    [Parameter] public EventCallback<(TreeNodeDto, MouseEventArgs)> OnContextMenu { get; set; }

    private bool isExpanded;
    private bool isChildrenExpanded;
    private TreeNodeDto? draggedNode;

    private async Task ToggleExpand()
    {
        if (!isExpanded)
        {
            if (OnExpand.HasDelegate && Node.HasChildren)
                await OnExpand.InvokeAsync(Node);
            isExpanded = true;
            isChildrenExpanded = false;
        }
        else
        {
            isExpanded = false;
            isChildrenExpanded = false;
        }
    }

    private void ToggleChildren() => isChildrenExpanded = !isChildrenExpanded;

    private void OnDragStart(DragEventArgs e, TreeNodeDto n) => draggedNode = n;

    private async Task OnDrop(DragEventArgs e, TreeNodeDto target)
    {
        if (draggedNode != null)
            await OnNodeDrop.InvokeAsync((draggedNode, target));
    }
}
